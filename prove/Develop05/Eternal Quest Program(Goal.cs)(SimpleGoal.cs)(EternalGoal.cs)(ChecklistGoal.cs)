using System;
using System.Collections.Generic;
using System.IO;

public class GoalManager
{
    private List<Goal> goals;
    private int score;

    public GoalManager()
    {
        goals = new List<Goal>();
        score = 0;
    }

    public void Start()
    {
        bool running = true;
        while (running)
        {
            DisplayMenu();

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    DisplayPlayerInfo();
                    break;
                case "2":
                    ListGoalNames();
                    break;
                case "3":
                    ListGoalDetails();
                    break;
                case "4":
                    CreateGoal();
                    break;
                case "5":
                    RecordEvent();
                    break;
                case "6":
                    SaveGoals();
                    break;
                case "7":
                    LoadGoals();
                    break;
                case "8":
                    running = false;
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please enter a number between 1 and 8.");
                    break;
            }
        }
    }

    private void DisplayMenu()
    {
        Console.WriteLine("Eternal Quest Program");
        Console.WriteLine("1. Display Player Info");
        Console.WriteLine("2. List Goal Names");
        Console.WriteLine("3. List Goal Details");
        Console.WriteLine("4. Create New Goal");
        Console.WriteLine("5. Record Event");
        Console.WriteLine("6. Save Goals");
        Console.WriteLine("7. Load Goals");
        Console.WriteLine("8. Exit");
        Console.Write("Enter your choice: ");
    }

    private void DisplayPlayerInfo()
    {
        Console.WriteLine($"Current Score: {score}");
    }

    private void ListGoalNames()
    {
        foreach (var goal in goals)
        {
            Console.WriteLine(goal.ShortName);
        }
    }

    private void ListGoalDetails()
    {
        foreach (var goal in goals)
        {
            Console.WriteLine(goal.GetDetailsString());
        }
    }

    private void CreateGoal()
    {
        Console.Write("Enter goal name: ");
        string name = Console.ReadLine();

        Console.Write("Enter goal description: ");
        string description = Console.ReadLine();

        Console.Write("Enter points for completing the goal: ");
        int points = GetValidIntegerInput();

        Console.WriteLine("Select goal type:");
        Console.WriteLine("1. Simple Goal");
        Console.WriteLine("2. Eternal Goal");
        Console.WriteLine("3. Checklist Goal");
        Console.Write("Enter your choice: ");
        string choice = Console.ReadLine();

        Goal goal;
        switch (choice)
        {
            case "1":
                goal = new SimpleGoal(name, description, points);
                break;
            case "2":
                goal = new EternalGoal(name, description, points);
                break;
            case "3":
                Console.Write("Enter target number of completions: ");
                int target = GetValidIntegerInput();
                Console.Write("Enter bonus points for completing the target: ");
                int bonus = GetValidIntegerInput();
                goal = new ChecklistGoal(name, description, points, target, bonus);
                break;
            default:
                Console.WriteLine("Invalid choice.");
                return;
        }

        goals.Add(goal);
    }

    private void RecordEvent()
    {
        Console.WriteLine("Select goal to record event for:");
        for (int i = 0; i < goals.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {goals[i].ShortName}");
        }

        Console.Write("Enter goal number: ");
        int goalIndex = GetValidIntegerInput() - 1;

        if (goalIndex < 0 || goalIndex >= goals.Count)
        {
            Console.WriteLine("Invalid goal number.");
            return;
        }

        goals[goalIndex].RecordEvent();
        score += goals[goalIndex].Points;
    }

    private void SaveGoals()
    {
        using (StreamWriter writer = new StreamWriter("goals.txt"))
        {
            foreach (var goal in goals)
            {
                writer.WriteLine(goal.GetStringRepresentation());
            }
        }

        Console.WriteLine("Goals saved successfully.");
    }

    private void LoadGoals()
    {
        goals.Clear();

        try
        {
            using (StreamReader reader = new StreamReader("goals.txt"))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    Goal goal = GoalParser.ParseGoalFromString(line);
                    if (goal != null)
                        goals.Add(goal);
                }
            }

            Console.WriteLine("Goals loaded successfully.");
        }
        catch (FileNotFoundException)
        {
            Console.WriteLine("File 'goals.txt' not found.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading goals: {ex.Message}");
        }
    }

    private int GetValidIntegerInput()
    {
        int input;
        while (!int.TryParse(Console.ReadLine(), out input))
        {
            Console.WriteLine("Invalid input. Please enter a valid integer.");
        }
        return input;
    }

    public static void Main(string[] args)
    {
        GoalManager manager = new GoalManager();
        manager.Start();
    }
}

public abstract class Goal
{
    public string ShortName { get; protected set; }
    public string Description { get; protected set; }
    public int Points { get; protected set; }

    public Goal(string shortName, string description, int points)
    {
        ShortName = shortName;
        Description = description;
        Points = points;
    }

    public abstract void RecordEvent();
    public abstract bool IsComplete();
    public virtual string GetDetailsString()
    {
        return $"[{(Points > 0 ? " " : "X")}] {ShortName}: {Description}";
    }
    public abstract string GetStringRepresentation();
}

public static class GoalParser
{
    public static Goal ParseGoalFromString(string line)
    {
        string[] parts = line.Split(':');
        if (parts.Length < 4)
            return null;

        string goalType = parts[0];
        string name = parts[1];
        string description = parts[2];
        int points = int.Parse(parts[3]);

        Goal goal;
        switch (goalType)
        {
            case "SimpleGoal":
                goal = new SimpleGoal(name, description, points);
                break;
            case "EternalGoal":
                goal = new EternalGoal(name, description, points);
                break;
            case "ChecklistGoal":
                if (parts.Length < 6)
                    return null;
                int target = int.Parse(parts[4]);
                int bonus = int.Parse(parts[5]);
                goal = new ChecklistGoal(name, description, points, target, bonus);
                break;
            default:
                Console.WriteLine($"Invalid goal type: {goalType}");
                return null;
        }

        return goal;
    }
}

public class SimpleGoal : Goal
{
    private bool isComplete;

    public SimpleGoal(string shortName, string description, int points)
        : base(shortName, description, points)
    {
        isComplete = false;
    }

    public override void RecordEvent()
    {
        isComplete = true;
    }

    public override bool IsComplete()
    {
        return isComplete;
    }

    public override string GetStringRepresentation()
    {
        return $"SimpleGoal: {ShortName}:{Description}:{Points}";
    }
}

public class EternalGoal : Goal
{
    public EternalGoal(string shortName, string description, int points)
        : base(shortName, description, points)
    {
    }

    public override void RecordEvent()
    {
        // Implementación específica de EternalGoal
    }

    public override bool IsComplete()
    {
        // Implementación específica de EternalGoal
        return false;
    }

    public override string GetStringRepresentation()
    {
        // Implementación específica de EternalGoal
        return string.Empty;
    }
}

public class ChecklistGoal : Goal
{
    private int target;
    private int bonus;

    public ChecklistGoal(string shortName, string description, int points, int target, int bonus)
        : base(shortName, description, points)
    {
        this.target = target;
        this.bonus = bonus;
    }

    public override void RecordEvent()
    {
        // Implementación específica de ChecklistGoal
    }

    public override bool IsComplete()
    {
        // Implementación específica de ChecklistGoal
        return false;
    }

    public override string GetStringRepresentation()
    {
        // Implementación específica de ChecklistGoal
        return string.Empty;
    }
}
